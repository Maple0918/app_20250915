/* =======================================
 * layout.css - ページレイアウト構造の定義
 * =======================================
 * このファイルの役割：
 * Webアプリケーションの骨組み（レイアウト）を定義します。
 * ページ全体の構造や主要なエリアの配置ルールを設定します。
 *
 * 含まれる内容：
 * 1. ヘッダー領域（アプリタイトル、ユーザー情報など）
 * 2. ナビゲーション領域（画面切り替えボタンなど）
 * 3. メイン領域（コンテンツ表示エリア）
 * 4. ビュー（画面）の表示制御
 * ======================================= */

/* =======================================
 * アプリケーションヘッダー領域
 * =======================================*/

/* ヘッダー全体のコンテナ */
.c-app-header {
  background: var(--c-accent);        /* 背景色：（清潔感・重要性を表現） */
  padding: var(--space-4);           /* 内側余白：24px（ゆったりとした間隔） */
  border-radius: var(--radius-m);    /* 角丸：8px（モダンな見た目） */
  margin-bottom: var(--space-3);     /* 下マージン：16px（次の要素との間隔） */
  box-shadow: var(--c-shadow);       /* 影：軽い立体感で重要性を強調 */

  height: 80px;                     /* 固定高さ：60px（一定のサイズ感を維持） */
  
  /* ================
   * レイアウト設定（Flexbox）
   * ================ */
  display: flex;                     /* フレックスコンテナに設定 */
  align-items: center;               /* 縦方向中央揃え（高さが違う要素も中央に） */
  justify-content: space-between;    /* 横方向：両端揃え（左右に要素を分散） */
}

/* ヘッダー左側エリア */
.c-app-header_left {
  display: flex;                     /* 内部要素も横並び */
  align-items: center;               /* 縦中央揃え */
}

/* ヘッダー右側エリア */
.c-app-header_right {
  display: flex;                     /* 内部要素も横並び */
  align-items: center;               /* 縦中央揃え */
  margin-left: auto;                 /* 自動的に右端に配置 */
}

/* =======================================
 * ナビゲーション(デバッグ用)
 * ======================================= */
.c-nav {
  background: var(--c-white);        /* 背景色：白（ヘッダーと統一感） */
  padding: var(--space-4);           /* 内側余白：24px（操作しやすいサイズ） */
  border-radius: var(--radius-m);    /* 角丸：8px（統一されたデザイン） */
  margin-bottom: var(--space-3);     /* 下マージン：16px（メインコンテンツとの間隔） */
  box-shadow: var(--c-shadow);       /* 影：軽い立体感 */
}

/* ナビゲーション内のアクションボタン群 */
.c-nav__actions { 
  display: flex;                     /* ボタンを横並びに配置 */
  gap: var(--space-1);              /* ボタン間の間隔：8px */
}

/* =======================================
 * メインコンテンツ領域
 * ======================================= */

/* メイン領域の基本設定 */
.c-main { 
  /* 最小高さの設定
   * 初学者向け：min-height の使用理由
   * - height: 固定サイズ（コンテンツが少ない時に空白ができる）
   * - min-height: 最小サイズ（コンテンツに応じて伸びる）
   * 
   * 60vh = ビューポート高さの60%
   * vh は「viewport height」の略で、画面の高さを基準にした単位です */
  min-height: 60vh; 
  
  /* この設定により：
   * - コンテンツが少ない時でも一定の高さを確保
   * - コンテンツが多い時は自動的に高さが拡張
   * - レスポンシブデザインに対応（画面サイズに応じて調整） */
}

/* =======================================
 * ビュー（画面）表示制御システム
 * =======================================
 *
 * このアプリケーションはSPA（Single Page Application）として設計されており、
 * 複数の画面（ビュー）を一つのページ内で切り替えて表示します。
 * この仕組みにより、ページリロードなしでスムーズな画面遷移を実現します。
 */

/* ビュー（画面）の基本スタイル */
.c-view {
  /* ================
   * 表示制御
   * ================ */
   
  /* 初期状態：非表示
   * 初学者向け：display: none の意味
   * この状態では要素は完全に非表示になり、レイアウトからも除外されます。
   * visibility: hidden との違い：
   * - display: none → 要素が存在しないかのように扱われる
   * - visibility: hidden → 要素は見えないが、スペースは占有する */
  display: none;
  
  /* ================
   * 視覚的スタイリング
   * ================ */
   
  background: var(--c-white);        /* 背景色：白（コンテンツエリアとして識別しやすい） */
  padding: var(--space-4);           /* 内側余白：24px（読みやすい余白） */
  border-radius: var(--radius-l);    /* 角丸：10px（他の要素より大きめで特別感を演出） */
  box-shadow: var(--c-shadow);       /* 影：コンテンツエリアとしての重要性を表現 */
  
  /* 初学者向け：なぜ大きめの角丸（radius-l）を使用？
   * メインコンテンツエリアは最も重要な領域なので、
   * 他の要素より目立たせるために大きめの角丸を使用しています。 */
}

/* アクティブなビューの表示 */
.c-view.is-active { 
  /* JavaScriptによって動的に付与されるクラス
   * 初学者向け：.c-view.is-active の意味
   * これは「c-viewクラスとis-activeクラスの両方を持つ要素」を指します。
   * スペースがないことに注意（スペースがあると子孫セレクタになってしまう） */
  display: block; 
  
  /* display: block により要素が表示状態になります
   * これで画面切り替えが実現されます： */
}

/* ビューのタイトル部分 */
.c-view__title {
  margin: 0 0 20px 0;           /* 下マージン：20px（タイトルと内容の間隔） */   
  font-size: var(--fz-22);       /* フォントサイズ：22px（見出しとして適切なサイズ） */
  color: #333;               /* 文字色：ダークグレー（読みやすさ重視） */
}